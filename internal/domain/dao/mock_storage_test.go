/*
 * This file was last modified at 2024-04-22 10:40 by Victor N. Skurikhin.
 * mock_storage_test.go
 * $Id$
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/storage.go -package dao
//

// Package dao is a generated GoMock package.
package dao

import (
	context "context"
	"github.com/vskurikhin/gophermart/internal/storage"
	reflect "reflect"

	pgx "github.com/jackc/pgx/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetAllForString mocks base method.
func (m *MockStorage) GetAllForString(sql, login string) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForString", sql, login)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForString indicates an expected call of GetAllForString.
func (mr *MockStorageMockRecorder) GetAllForString(sql, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForString", reflect.TypeOf((*MockStorage)(nil).GetAllForString), sql, login)
}

// GetByID mocks base method.
func (m *MockStorage) GetByID(sql string, id int) (pgx.Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", sql, id)
	ret0, _ := ret[0].(pgx.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStorageMockRecorder) GetByID(sql, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStorage)(nil).GetByID), sql, id)
}

// GetByStr1Str2 mocks base method.
func (m *MockStorage) GetByStr1Str2(sql, str1, str2 string) (pgx.Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStr1Str2", sql, str1, str2)
	ret0, _ := ret[0].(pgx.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStr1Str2 indicates an expected call of GetByStr1Str2.
func (mr *MockStorageMockRecorder) GetByStr1Str2(sql, str1, str2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStr1Str2", reflect.TypeOf((*MockStorage)(nil).GetByStr1Str2), sql, str1, str2)
}

// GetByString mocks base method.
func (m *MockStorage) GetByString(sql, str string) (pgx.Row, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByString", sql, str)
	ret0, _ := ret[0].(pgx.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByString indicates an expected call of GetByString.
func (mr *MockStorageMockRecorder) GetByString(sql, str any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByString", reflect.TypeOf((*MockStorage)(nil).GetByString), sql, str)
}

// Save mocks base method.
func (m *MockStorage) Save(sql string, values ...any) (pgx.Row, error) {
	m.ctrl.T.Helper()
	varargs := []any{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockStorageMockRecorder) Save(sql any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{sql}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStorage)(nil).Save), varargs...)
}

// Transaction mocks base method.
func (m *MockStorage) Transaction(args storage.TxArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", args)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockStorageMockRecorder) Transaction(args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockStorage)(nil).Transaction), args)
}

// WithContext mocks base method.
func (m *MockStorage) WithContext(ctx context.Context) storage.Storage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(storage.Storage)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockStorageMockRecorder) WithContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockStorage)(nil).WithContext), ctx)
}
